#!/bin/bash

ACTION=""

function action {
  case $1 in
    "new")
      new $2
      ;;
    "init")
      init $2
      ;;
    "sync")
      sync
      ;;
    "dev")
      dev
      ;;
    "wp")
      ACTION=${ACTION/$1/ }
      wp
      ;;
    "git")
      ACTION=${ACTION/$1/ }
      git_func
      ;;
    "composer")
      ACTION=${ACTION/$1/ }
      composer
      ;;
    "require" | "install")
      composer
      ;;
    "add")
      add $2 $3
      ;;
    "del")
      del $2 $3
      ;;
    "dc" | "docker" | "docker-compose")
      ACTION=${ACTION/$1/ }
      docker
      ;;
    "ps")
      docker
      ;;
    "from")
      from $2 $3
      ;;
    *)
      if [[ $DEFAULT_ACTION != "" ]]; then
        $DEFAULT_ACTION
      else
        help
      fi
      ;;
  esac
}


function help {
  echo "Usage: wpt [options] <ACTION>"
  echo
  echo "Actions:"
  echo -e " init <URL_REPO>\t\tInit template repository from wpt"
  echo -e " new <URL_REPO>\t\t\tCreate new project repository from this template"
  echo -e " sync\t\t\t\tUpdate project repository from template"
  echo -e " dev <CMD>\t\t\tRun command in dev service"
  echo -e " composer <ACTION>\t\tRun composer action in dev service"
  echo -e " require <PACKAGE>\t\tAdd require package"
  echo -e " * All docker-compose actions\tSee docker-compose -h"
  echo
  echo "Options:"
  echo " -h: Show this help"
  exit
}


function new {
  if [[ $1 == "" ]]; then
    echo "Error: Debe indicar una ruta de repositorio git válida"
    help
  fi
  STR="http"
  URL=$1
  if [[ $URL != ${STR}* ]]; then
    get_git_config
    if [[ $GIT_SERVER && $GIT_PDIR ]]; then
      create_repo $URL
      URL=${GIT_SERVER}${GIT_PDIR}/$URL.git
    else
      echo "Error: Url incorrecta"
      exit
    fi
  fi
  git remote remove upstream 2> /dev/null
  git remote rename origin upstream
  git remote add origin $URL
  git remote set-url --push upstream DISABLE
  git remote -v
  git push -fu origin master
}


function init {
  if [[ $1 == "" ]]; then
    echo "Error: Debe indicar una ruta de repositorio git válida"
    help
  fi
  rm -rf .git
  git init
  git remote add origin $1
  git add --all
  git commit -am "First commit"
  git remote -v
  git push --set-upstream -fu origin master
}

function sync {
  git pull upstream master
}

function init_env {
  if [[ $ENV != "prod" && $ENV != "dev" ]]; then
    echo -e "Entorno erróneo";
    echo -e " - prod: Producción"
    echo -e " - dev: Desarrollo\n"
    echo -e "Revise el fichero de configuración .env"
    exit
  fi;
  if [[ $SUDO == "true" || $SUDO == "" ]]; then
    SUDO="sudo "
  else
    SUDO=""
  fi
  if [[ $NETWORK == "" ]]; then
    NETWORK="wpt"
  fi
  if [[ $WEB_PORT == "" ]]; then
    WEB_PORT=80
  fi
  if [[ $WEB_SSL_PORT == "" ]]; then
    WEB_SSL_PORT=443
  fi
  CORE="-f deploy/docker-compose.yml -f deploy/docker-compose.$ENV.yml"
  NET=$($SUDO docker network ls | grep $NETWORK)
  PROXY=$($SUDO docker ps | grep wpt_proxy)
  if [[ $NET == "" || $PROXY == "" ]]; then
    timeout 2  bash -c "</dev/tcp/localhost/$WEB_PORT" 2> /dev/null
    if [[ $? == 0 ]]; then
      echo "El puerto $WEB_PORT ya se encuentra en uso"
      exit
    fi
    timeout 2  bash -c "</dev/tcp/localhost/$WEB_SSL_PORT" 2> /dev/null
    if [[ $? == 0 ]]; then
      echo "El puerto $WEB_SSL_PORT ya se encuentra en uso"
      exit
    fi
    $SUDO docker-compose -p wpt -f deploy/core/proxy/docker-service.yml up -d
  fi
  if [[ $SERVICES != "" ]]; then
    for S in $SERVICES; do
      SERVS="$SERVS -f deploy/services/$S/docker-service.yml"
    done
  fi
}

function dev {
  init_env
  if [[ $ACTION == "dev" ]]; then
    ACTION="dev bash"
  fi
  $SUDO docker-compose -p $APP_NAME $CORE $SERVS run ${ACTION}
}
function composer {
  init_env
  $SUDO docker-compose -p $APP_NAME $CORE $SERVS run dev composer ${ACTION}
}
function wp {
  init_env
  $SUDO docker-compose -p $APP_NAME $CORE $SERVS run dev wp ${ACTION}
}
function git_func {
  init_env
  $SUDO docker-compose -p $APP_NAME $CORE $SERVS run --workdir=/var/project dev git ${ACTION}
}

function docker {
  init_env
  if [[ $ACTION == "" ]]; then
    ACTION="up -d"
  fi
  $SUDO docker-compose -p $APP_NAME $CORE $SERVS $ACTION
}

function add {
  init_env
  $SUDO docker-compose -p $APP_NAME $CORE $SERVS run dev composer require "wpackagist-$1/$2:*"
}

function del {
  init_env
  $SUDO docker-compose -p $APP_NAME $CORE $SERVS run dev composer remove "wpackagist-$1/$2"
}

function get_git_config {
  GIT_SERVER=$(git config --global --get wpt.server)
  GIT_TOKEN=$(git config --global --get wpt.token)
  GIT_ID=$(git config --global --get wpt.templateid)
  GIT_TEMPLATE_DIR=$(git config --global --get wpt.templatedir)
  GIT_PID=$(git config --global --get wpt.projectid)
  GIT_PDIR=$(git config --global --get wpt.projectdir)
  if [[ $GIT_PID == "" ]]; then
    $GIT_PID=GIT_ID
  fi
  if [[ $GIT_PDIR == "" ]]; then
    $GIT_PDIR=GIT_TEMPLATE_DIR
  fi
}

function create_repo {
  E=$( git ls-remote ${GIT_SERVER}$1.git 2> /dev/null && echo 1 || echo 0 )
  if [[ $E == "0" ]]; then
    curl -H "Content-Type:application/json" "${GIT_SERVER}api/v3/projects?private_token=${GIT_TOKEN}" -d "{ \"name\": \"$1\", \"namespace_id\":\"$GIT_PID\" }"
  fi
}

function from {
    get_git_config
    if [[ $GIT_ID && $GIT_SERVER && $GIT_TOKEN && $GIT_TEMPLATE_DIR ]]; then
      git clone ${GIT_SERVER}${GIT_TEMPLATE_DIR}/$1.git $2
      cd $2
      create_repo $2
      new ${GIT_SERVER}${GIT_PDIR}/$2.git
    fi
}


#main
if [ -f .env ]; then
  . <(cat .env | sed "s/=/=\"/g" | perl -p -e 's/\n/"\n/')
fi
while getopts ":h" arg; do
  case $arg in
    h)
      help
      ;;
  esac
done
shift $((OPTIND-1))
ACTION=$*
action $*
